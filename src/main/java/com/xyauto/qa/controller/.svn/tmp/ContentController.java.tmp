package com.xyauto.qa.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.PageInfo;
import com.xyauto.qa.cons.CommonCons;
import com.xyauto.qa.cons.ErrorCode;
import com.xyauto.qa.entity.*;
import com.xyauto.qa.mapper.AttachMapper;
import com.xyauto.qa.mapper.CityMapper;
import com.xyauto.qa.service.*;
import com.xyauto.qa.service.cloud.QaUserService;
import com.xyauto.qa.service.cloud.RUserService;
import com.xyauto.qa.util.DateUtils;
import com.xyauto.qa.util.QaResult;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import rx.internal.util.LinkedArrayList;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * Created by shiqm on 2017/3/23.
 */
@Controller
@RequestMapping("user/question")
public class ContentController extends AjaxBaseController {


    @Autowired
    private QuestionService questionService;

    @Autowired
    private UserService userService;

    @Autowired
    private BlocksService blocksService;

    @Autowired
    private RUserService rUserService;

    @Autowired
    private CityMapper cityMapper;

    @Autowired
    private CategoryService categoryService;

    @Autowired
    private BrandService brandService;

    @Autowired
    private QaUserService qaUserService;
	@Autowired
	private IAnswerService answerService;
	@Autowired
	private AttachMapper attachMapper;

    @RequestMapping("contentList")
    public void contentList(ModelMap modelMap,String startDate, String endDate,Integer userType, Question question,String keyWord,String nickName,Brand brand,Series series) {

        if(StringUtils.isNotBlank(nickName)){
            String userId=rUserService.getUserIdByNickName(nickName);
            question.setUid(Long.parseLong(userId));
            modelMap.put("nickName", nickName);
        }
        if (StringUtils.isNotBlank(keyWord)) {
            modelMap.put("keyWord", keyWord);
        }
        if (StringUtils.isNotBlank(startDate)) {
			Date date= DateUtils.strToDate(startDate);
			if (date!=null) {
				question.setCreatedAt((int)(date.getTime()/1000));
				modelMap.put("startDate", startDate);
			}			
		}
        if (StringUtils.isNotBlank(endDate)) {
			Date date= DateUtils.strToDate(endDate);
			if (date!=null) {
				question.setUpdatedAt((int)(date.getTime()/1000));
				modelMap.put("endDate", endDate);
			}
		}
        modelMap.put("userType", userType);
    	PageInfo pageInfo = questionService.getQuestionListByMapParam(question,keyWord,nickName,userType,brand,series,CommonCons.Quesiotn_Flag.NORMAL_QUESTION);
        modelMap.put("pager", pageInfo);
        modelMap.put("question", question);
        Category category = new Category();
        category.setParent(0);
        //获取问题分类信息
        modelMap.put("categoryList", categoryService.get(category));
        //获取品牌信息
        modelMap.put("brandList", brandService.selectBrandOrderByName());
        //获取市信息
        City city = new City();
        city.setParent(0);
        modelMap.put("provinceList", cityMapper.select(city));

    }

    @RequestMapping("rubbishList")
    public void rubbishList(ModelMap modelMap,Integer answerType, String startDate, String endDate,
    		Question question,Answer answer,String keyWord,String nickName) {
       
    	if(StringUtils.isNotBlank(nickName)){
            String userId=rUserService.getUserIdByNickName(nickName);
            question.setUid(Long.parseLong(userId));
        }
        if (StringUtils.isNotBlank(keyWord)) {
            modelMap.put("keyWord", keyWord);
        }
        if (StringUtils.isNotBlank(startDate)) {
			Date date= DateUtils.strToDate(startDate);
			if (date!=null) {
				question.setCreatedAt((int)(date.getTime()/1000));
				modelMap.put("startDate", startDate);
			}			
		}
        if (StringUtils.isNotBlank(endDate)) {
			Date date= DateUtils.strToDate(endDate);
			if (date!=null) {
				question.setUpdatedAt((int)(date.getTime()/1000));
				modelMap.put("endDate", endDate);
			}
		}
        PageInfo pageInfo;
        if (answerType!=null&&answerType==2) {
        	pageInfo = answerService.getAnswerList(answer, null, null, keyWord,CommonCons.Quesiotn_Flag.DELETE_QUESTION);
            modelMap.put("answeQuestion", answer);
            modelMap.put("answerType", 2);
            modelMap.put("question", null);
		}else{
			pageInfo = questionService.getQuestionListByMapParam(question,keyWord,nickName,null,
            		null,null,CommonCons.Quesiotn_Flag.DELETE_QUESTION);
            modelMap.put("answeQuestion", question);
            modelMap.put("answerType", 1);
            Category category = new Category();
            category.setParent(0);
            //获取问题分类信息
            modelMap.put("categoryList", categoryService.get(category));
		}         
        modelMap.put("pager", pageInfo);
        //获取市信息
        City city = new City();
        city.setParent(0);
        modelMap.put("provinceList", cityMapper.select(city));
    }

    @RequestMapping("questionAdd")
    public void questionAdd(ModelMap modelMap) {
        JSONArray jsonArray = blocksService.getBlockByName(CommonCons.Blocks_Flag.USER_OPRERATE_BUSINESS);
        JSONArray businessUserList = null;
        if (jsonArray != null) {
            String temp = rUserService.getUserList(jsonArray.toString().replace("[", "").replace("]", ""));
            businessUserList = JSON.parseArray(temp);
        }
        modelMap.put("businessUserList", businessUserList);
        City city = new City();
        city.setParent(0);
        modelMap.put("provinceList", cityMapper.select(city));
        Category category = new Category();
        category.setParent(0);
        modelMap.put("categoryList", categoryService.get(category));
        modelMap.put("brandList", brandService.selectBrandOrderByName());
    }

    @RequestMapping(value = "createQuestion", method = RequestMethod.POST)
    @ResponseBody
    public QaResult createQuestion(String uid, String category_id, String content, String[] seriesIds, String special_id, String city_id, String attachs, Integer is_good) {
        String cars = null;
        if (seriesIds != null && seriesIds.length > 0) {
            cars = Arrays.toString(seriesIds).replace("[", "").replace("]", "");
        }
        String res = qaUserService.createQuestionNoPic(category_id, content, uid, cars, null, city_id, attachs, is_good);
        JSONObject jsonObject = JSON.parseObject(res);
        if(jsonObject.getIntValue("code")==10000){
            return new QaResult();
        }else{
            return new QaResult(ErrorCode.OVER,jsonObject.getString("msg"));
        }
    }

    @RequestMapping(value = "frozenUserAndExpert", method = RequestMethod.POST)
    @ResponseBody
    public QaResult frozenUserAndExpert(User user, Boolean is) {
        userService.frozenUserAndExpert(user, is);
        return new QaResult();
    }

    @RequestMapping(value = "setGood", method = RequestMethod.POST)
    @ResponseBody
    public QaResult setGood(Question question, Boolean is) {
    	if (question.getGoodSort()==null) {
			question.setGoodSort(0);
		}
        questionService.updateGood(question, is);
        return new QaResult();
    }

    @RequestMapping(value = "setTop", method = RequestMethod.POST)
    @ResponseBody
    public QaResult setTop(Question question, Boolean is) {
    	if (question.getTopSort()==null) {
			question.setTopSort(0);
		}
        questionService.updateTop(question, is);
        return new QaResult();
    }

    @RequestMapping(value = "deleteQuestion", method = RequestMethod.POST)
    @ResponseBody
    public QaResult deleteQuestion(Question question) {
        questionService.deleteQuestionById(question.getQuestionId());
        return new QaResult();
    }

    @RequestMapping(value = "recoveryQuestion", method = RequestMethod.POST)
    @ResponseBody
    public QaResult recoveryQuestion(Question question) {
        questionService.recoveryQuestionById(question.getQuestionId());
        return new QaResult();
    }
    
    @RequestMapping("toUpadteQuestion")
    public void  toUpadteQuestion(Long questionId,ModelMap modelMap){
    	Question question =new Question();
    	question.setQuestionId(questionId);
    	PageInfo pageInfo = questionService.getQuestionList(question);
    	question=(Question) pageInfo.getList().get(0);
    	modelMap.put("question", question);
    	StringBuffer attachs=new StringBuffer();
    	if (question.getAttaches()!=null&&question.getAttaches().size()>0) {
    		for (Attach attach : question.getAttaches()) {
				attachs.append(attach.getFile()).append(",");
			}   		
    		modelMap.put("attachs", attachs.substring(0, attachs.length()-1));
		}
        JSONArray jsonArray = blocksService.getBlockByName(CommonCons.Blocks_Flag.USER_OPRERATE_BUSINESS);
        JSONArray businessUserList = null;
        if (jsonArray != null) {
            String temp = rUserService.getUserList(jsonArray.toString().replace("[", "").replace("]", ""));
            businessUserList = JSON.parseArray(temp);
        }
        modelMap.put("businessUserList", businessUserList);
    }
    
    @RequestMapping(value = "updateQuestion", method = RequestMethod.POST)
    @ResponseBody
    public QaResult updateQuestion(Question que,String attachs) {
        if (que==null||que.getQuestionId()==null||que.getUid()==null) {
			return new QaResult("9999", "修改问题传递参数错误 ");
		}
        //根据问题ID查询问题信息
        Question question=questionService.get(que.getQuestionId());
        //根据问题ID查询附件信息
        Attach attach =new Attach();
        attach.setTargetId(que.getQuestionId());
        attach.setType(1);
        List<Attach> list= attachMapper.select(attach);
        //保存问题信息
    	question.setUid(que.getUid());
    	question.setContent(que.getContent());
    	if (que.getTopSort()==null||que.getTopSort()==0) {
    		question.setIsTop(0);
		}else{
			question.setIsTop(1);
		}    	
    	question.setTopSort(que.getTopSort());
    	question.setUpdatedAt((int)(new Date().getTime()/1000));
        if (StringUtils.isNotBlank(attachs)) {
        	question.setHasAttach(1);
		}else{
			question.setHasAttach(0);
		}
        questionService.update(question);
        
        //保存附件信息---先删除在添加新的
        for (Attach attach2 : list) {
			attach2.setDeletedAt((int)(new Date().getTime()/1000));
			attachMapper.updateByPrimaryKey(attach2);
		}
        String [] attachArray=attachs.split(",");
        Date date=new Date();
        int time=(int)(date.getTime()/1000);
        for (int i = 0; i < attachArray.length; i++) {
        	Attach saveAttach=new Attach();
        	saveAttach.setType(1);
        	saveAttach.setTargetId(que.getQuestionId());
        	saveAttach.setFile(attachArray[i]);
        	saveAttach.setFileType(0);
        	saveAttach.setCreatedAt(time);
        	saveAttach.setUpdatedAt(time);
        	saveAttach.setDeletedAt(0);
        	attachMapper.saveAttach(saveAttach);
		}
        return new QaResult();    
    }
    
    @RequestMapping("verifyList")
    public void verifyList(ModelMap modelMap,Integer answerType, String startDate, String endDate,
    		Question question,Answer answer,String keyWord,String nickName) {
        if(StringUtils.isNotBlank(nickName)){
            String userId=rUserService.getUserIdByNickName(nickName);
            question.setUid(Long.parseLong(userId));
        }
        if (StringUtils.isNotBlank(keyWord)) {
            modelMap.put("keyWord", keyWord);
        }
        if (StringUtils.isNotBlank(startDate)) {
			Date date= DateUtils.strToDate(startDate);
			if (date!=null) {
				question.setCreatedAt((int)(date.getTime()/1000));
				modelMap.put("startDate", startDate);
			}			
		}
        if (StringUtils.isNotBlank(endDate)) {
			Date date= DateUtils.strToDate(endDate);
			if (date!=null) {
				question.setUpdatedAt((int)(date.getTime()/1000));
				modelMap.put("endDate", endDate);
			}
		} 
    	if (question.getStatus()==null) {
    		question.setStatus(-1);
		}        
        PageInfo pageInfo;
        if (answerType!=null&&answerType==2) {
        	pageInfo = answerService.getAnswerList(answer, null, null, keyWord,CommonCons.Quesiotn_Flag.REVIEW_QUESTION);
            modelMap.put("answeQuestion", answer);
            modelMap.put("answerType", 2);
            modelMap.put("question", null);
		}else{
	         pageInfo = questionService.getQuestionListByMapParam(question,keyWord,nickName,null,
	         		null,null,CommonCons.Quesiotn_Flag.REVIEW_QUESTION);
	         modelMap.put("answerType", 1);	        
	         modelMap.put("answeQuestion", question);
	         Category category = new Category();
	         category.setParent(0);
	         //获取问题分类信息
	         modelMap.put("categoryList", categoryService.get(category));
		}
        modelMap.put("pager", pageInfo);
        //获取市信息
        City city = new City();
        city.setParent(0);
        modelMap.put("provinceList", cityMapper.select(city));
    }
    
    //审核问题
    @RequestMapping(value = "verifyQuestion", method = RequestMethod.POST)
    @ResponseBody
    public QaResult verifyQuestion(Question question) {
        questionService.verifyQuestion(question.getQuestionId());
        return new QaResult();
    }
    
    @RequestMapping("topList")
    public void topList(ModelMap modelMap,Long questionId){
    	//查询需要置顶的帖子
    	Question question=questionService.get(questionId);
    	if (question==null) {
    		logger.info("问题id为空");
			return;
		}
    	//查询已经置顶的帖子
    	Question questiontop=new Question();
    	questiontop.setIsTop(1);
    	List<Question> topList=questionService.get(questiontop);
    	List<Question> questionList=new ArrayList<Question>();
    	questionList.add(question);
    	questionList.addAll(topList);
    	modelMap.put("questionList", questionList);
    }
<<<<<<< .mine


    @ModelAttribute("urlObj")
    public JSONObject getUrlObj() {
        return super.getUrlObj();
    }


=======
>>>>>>> .r67
}
